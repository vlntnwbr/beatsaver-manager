##
#   Copyright (c) 2022 Valentin Weber
#
#   This file is part of the software beatsaver-playlist-manager.
#
#   The software is licensed under the European Union Public License
#   (EUPL) version 1.2 or later. You should have received a copy of
#   the english license text with the software. For your rights and
#   obligations under this license refer to the file LICENSE or visit
#   https://joinup.ec.europa.eu/community/eupl/og_page/eupl to view
#   official translations of the licence in another language of the EU.
##

"""Local BeatSaber functionality for beatsaber-playlist-manager."""

import os
import shutil

from pathlib import Path
from typing import List

from .core.exceptions import BeatSaberError
from .core.models import BsPlaylist, CustomLevel


class BeatSaberManager:
    """Base for interacting with a local BeatSaber installation."""

    def __init__(self, directory: Path) -> None:
        """Init manager for BeatSaber installation at given location."""
        self.playlist_ext = ".bplist"
        self.default_songs = (  # Contains levels auto-generated by Mod
            "Jaroslav Beck - Beat Saber (Built in)",
        )
        self.directory = directory
        self.bpl_dir = directory / "Playlists"
        self.custom_lvl_dir = directory / "Beat Saber_Data" / "CustomLevels"
        for bs_dir in (self.bpl_dir, self.custom_lvl_dir):
            try:
                bs_dir.mkdir(parents=True)
            except FileExistsError as exc:
                err = "directory path points to an existing file"
                raise BeatSaberError(err, bs_dir) from exc
            except PermissionError as exc:
                err = "access to Beat Saber directory denied"
                raise BeatSaberError(err, bs_dir) from exc

    def get_bpl_files(self) -> List[Path]:
        """Return list of all bplist filepaths of given installation."""
        return [
            bpl.resolve() for bpl in self.bpl_dir.iterdir()
            if bpl.is_file() and bpl.suffix == self.playlist_ext
        ]

    def get_playlists(self) -> List[BsPlaylist]:
        """Return list with all playlists of given installation."""
        # TODO: exception handling
        # - list only includes existing files
        # - potential OSError needs handling
        # - potential ModelError needs handling
        # - exception handling should not interrupt for-loop
        playlist_files = self.get_bpl_files()
        bplists = []
        for playlist in playlist_files:
            content = playlist.read_bytes()
            bplists.append(BsPlaylist.from_json(content))
        return bplists

    def get_playlist_names(self) -> List[str]:
        """Return list with all playlist names of given installation."""
        return [bpl.title for bpl in self.get_playlists()]

    def remove_playlist(self, playlist: BsPlaylist) -> None:
        """Remove given playlist file."""
        # TODO

    def install_playlist(self, playlist: BsPlaylist) -> None:
        """Install given playlist file."""
        # TODO

    def get_custom_lvl_dirs(self) -> List[Path]:
        """Return list with all custom level directories."""
        return [
            lvl.resolve() for lvl in self.custom_lvl_dir.iterdir()
            if lvl.is_dir() and lvl.name not in self.default_songs
        ]

    def get_custom_levels(self) -> List[CustomLevel]:
        """Return keys of all installed songs from directory names."""
        return [CustomLevel(lvl) for lvl in self.get_custom_lvl_dirs()]

    def remove_custom_level(self, lvl: Path) -> None:
        """Delete an installed Beat Saber custom level."""


if __name__ == '__main__':
    mgr = BeatSaberManager(Path(os.getenv("BEATSABER")))
    print("\n".join(repr(bpl) for bpl in mgr.get_playlists()))
